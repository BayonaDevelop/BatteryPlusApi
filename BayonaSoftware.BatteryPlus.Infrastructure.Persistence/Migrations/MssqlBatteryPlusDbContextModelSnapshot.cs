// <auto-generated />
using System;
using BayonaSoftware.BatteryPlus.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BayonaSoftware.BatteryPlus.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MssqlBatteryPlusDbContext))]
    partial class MssqlBatteryPlusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Address", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("InternalNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StreetAid")
                        .HasColumnType("bigint")
                        .HasColumnName("StreetAID");

                    b.Property<long?>("StreetBid")
                        .HasColumnType("bigint")
                        .HasColumnName("StreetBID");

                    b.Property<long>("StreetId")
                        .HasColumnType("bigint")
                        .HasColumnName("StreetID");

                    b.HasKey("Id")
                        .HasName("pk_Address");

                    b.HasIndex("StreetAid");

                    b.HasIndex("StreetBid");

                    b.HasIndex("StreetId");

                    b.ToTable("Address", "Addresses");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoatOfArms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_City");

                    b.HasIndex("CountryId");

                    b.ToTable("City", "Addresses");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Colony", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_Colony");

                    b.HasIndex("LocationId");

                    b.ToTable("Colony", "Addresses");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoatOfArms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CodeIso2")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCodeRegex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SatRegistryRegex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_Country");

                    b.ToTable("Country", "Addresses");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZoneType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_Location");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Location", "Addresses");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CoatOfArms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_Municipality");

                    b.HasIndex("CityId");

                    b.ToTable("Municipality", "Addresses");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Street", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ColonyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_Street");

                    b.HasIndex("ColonyId");

                    b.ToTable("Street", "Addresses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Address", b =>
                {
                    b.HasOne("BayonaSoftware.BatteryPlus.Domain.Addresses.Street", "StreetA")
                        .WithMany("AddressStreetsA")
                        .HasForeignKey("StreetAid")
                        .HasConstraintName("fk_Address_StreetA");

                    b.HasOne("BayonaSoftware.BatteryPlus.Domain.Addresses.Street", "StreetB")
                        .WithMany("AddressStreetsB")
                        .HasForeignKey("StreetBid")
                        .HasConstraintName("fk_Address_StreetB");

                    b.HasOne("BayonaSoftware.BatteryPlus.Domain.Addresses.Street", "Street")
                        .WithMany("AddressStreets")
                        .HasForeignKey("StreetId")
                        .IsRequired()
                        .HasConstraintName("fk_Address_Street");

                    b.Navigation("Street");

                    b.Navigation("StreetA");

                    b.Navigation("StreetB");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.City", b =>
                {
                    b.HasOne("BayonaSoftware.BatteryPlus.Domain.Addresses.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("fk_City_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Colony", b =>
                {
                    b.HasOne("BayonaSoftware.BatteryPlus.Domain.Addresses.Location", "Location")
                        .WithMany("Colonies")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("fk_Colony_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Location", b =>
                {
                    b.HasOne("BayonaSoftware.BatteryPlus.Domain.Addresses.Municipality", "Municipality")
                        .WithMany("Locations")
                        .HasForeignKey("MunicipalityId")
                        .IsRequired()
                        .HasConstraintName("fk_Location_Municipality");

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Municipality", b =>
                {
                    b.HasOne("BayonaSoftware.BatteryPlus.Domain.Addresses.City", "City")
                        .WithMany("Municipalities")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("fk_Municipality_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Street", b =>
                {
                    b.HasOne("BayonaSoftware.BatteryPlus.Domain.Addresses.Colony", "Colony")
                        .WithMany("Streets")
                        .HasForeignKey("ColonyId")
                        .IsRequired()
                        .HasConstraintName("fk_Street_Colony");

                    b.Navigation("Colony");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.City", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Colony", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Location", b =>
                {
                    b.Navigation("Colonies");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Municipality", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("BayonaSoftware.BatteryPlus.Domain.Addresses.Street", b =>
                {
                    b.Navigation("AddressStreets");

                    b.Navigation("AddressStreetsA");

                    b.Navigation("AddressStreetsB");
                });
#pragma warning restore 612, 618
        }
    }
}
